// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(LogHubDbContext))]
    [Migration("20230802212738_Add_Department")]
    partial class Add_Department
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Actions.RecordAction<Domain.Entities.Bases.BaseActionId, Domain.Entities.Bases.BaseId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("RecordId");

                    b.ToTable("BaseActions");
                });

            modelBuilder.Entity("Domain.Entities.Actions.RecordAction<Domain.Entities.Docs.DocActionId, Domain.Entities.Docs.DocumentId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("RecordId");

                    b.ToTable("DocActions");
                });

            modelBuilder.Entity("Domain.Entities.Actions.RecordAction<Domain.Entities.Logbooks.LogbookActionId, Domain.Entities.Logbooks.LogbookId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("RecordId");

                    b.ToTable("LogbookActions");
                });

            modelBuilder.Entity("Domain.Entities.Bases.Base", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DmpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DmpId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Bases");
                });

            modelBuilder.Entity("Domain.Entities.Bases.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Domain.Entities.DataManagementPlans.DataManagementPlanTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("DataManagementPlanTemplates");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DataManagementPlanTemplate");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.DataManagementPlans.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DataManagementPlanTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DmpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DataManagementPlanTemplateId");

                    b.HasIndex("DmpId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Docs.DocEditor", b =>
                {
                    b.Property<Guid>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DocEditors");
                });

            modelBuilder.Entity("Domain.Entities.Docs.DocLabel", b =>
                {
                    b.Property<Guid>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocId", "LabelId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LabelId");

                    b.ToTable("DocLabels");
                });

            modelBuilder.Entity("Domain.Entities.Docs.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LogbookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LogbookId");

                    b.ToTable("Docs");
                });

            modelBuilder.Entity("Domain.Entities.Docs.FavouriteDoc", b =>
                {
                    b.Property<Guid>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteDocs");
                });

            modelBuilder.Entity("Domain.Entities.Logbooks.Logbook", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.ToTable("Logbooks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Organisations.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Organisations.Organisation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvitationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Domain.Entities.Permissions.RecordPermission<Domain.Entities.Bases.BasePermissionId, Domain.Entities.Bases.BaseId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.HasIndex("RecordId");

                    b.HasIndex("UserId");

                    b.ToTable("BasePermissions");
                });

            modelBuilder.Entity("Domain.Entities.Permissions.RecordPermission<Domain.Entities.Docs.DocPermissionId, Domain.Entities.Docs.DocumentId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RecordId");

                    b.HasIndex("UserId");

                    b.ToTable("DocPermissions");
                });

            modelBuilder.Entity("Domain.Entities.Permissions.RecordPermission<Domain.Entities.Logbooks.LogbookPermissionId, Domain.Entities.Logbooks.LogbookId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid?>("LogbookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LogbookId");

                    b.HasIndex("RecordId");

                    b.HasIndex("UserId");

                    b.ToTable("LogbookPermissions");
                });

            modelBuilder.Entity("Domain.Entities.Requests.RecordRequest<Domain.Entities.Bases.BaseRequestId, Domain.Entities.Bases.BaseId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HandlerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HandlerId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("RecordId");

                    b.ToTable("BaseRequests");
                });

            modelBuilder.Entity("Domain.Entities.Requests.RecordRequest<Domain.Entities.Docs.DocRequestId, Domain.Entities.Docs.DocumentId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HandlerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HandlerId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("RecordId");

                    b.ToTable("DocRequests");
                });

            modelBuilder.Entity("Domain.Entities.Requests.RecordRequest<Domain.Entities.Logbooks.LogbookRequestId, Domain.Entities.Logbooks.LogbookId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HandlerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HandlerId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("RecordId");

                    b.ToTable("LogbookRequests");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Orcid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganisationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.DataManagementPlans.DataManagementPlan", b =>
                {
                    b.HasBaseType("Domain.Entities.DataManagementPlans.DataManagementPlanTemplate");

                    b.HasDiscriminator().HasValue("DataManagementPlan");
                });

            modelBuilder.Entity("Domain.Entities.Actions.RecordAction<Domain.Entities.Bases.BaseActionId, Domain.Entities.Bases.BaseId>", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bases.Base", null)
                        .WithMany("Actions")
                        .HasForeignKey("RecordId");
                });

            modelBuilder.Entity("Domain.Entities.Actions.RecordAction<Domain.Entities.Docs.DocActionId, Domain.Entities.Docs.DocumentId>", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Docs.Document", null)
                        .WithMany("Actions")
                        .HasForeignKey("RecordId");
                });

            modelBuilder.Entity("Domain.Entities.Actions.RecordAction<Domain.Entities.Logbooks.LogbookActionId, Domain.Entities.Logbooks.LogbookId>", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Logbooks.Logbook", null)
                        .WithMany("Actions")
                        .HasForeignKey("RecordId");
                });

            modelBuilder.Entity("Domain.Entities.Bases.Base", b =>
                {
                    b.HasOne("Domain.Entities.Organisations.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Entities.DataManagementPlans.DataManagementPlan", null)
                        .WithMany()
                        .HasForeignKey("DmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Bases.Label", b =>
                {
                    b.HasOne("Domain.Entities.Bases.Base", null)
                        .WithMany("Labels")
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.DataManagementPlans.DataManagementPlanTemplate", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Domain.Entities.Organisations.Organisation", null)
                        .WithMany("DataManagementPlanTemplates")
                        .HasForeignKey("OrganisationId");
                });

            modelBuilder.Entity("Domain.Entities.DataManagementPlans.Question", b =>
                {
                    b.HasOne("Domain.Entities.DataManagementPlans.DataManagementPlanTemplate", null)
                        .WithMany("Questions")
                        .HasForeignKey("DataManagementPlanTemplateId");

                    b.HasOne("Domain.Entities.DataManagementPlans.DataManagementPlanTemplate", null)
                        .WithMany()
                        .HasForeignKey("DmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Docs.DocEditor", b =>
                {
                    b.HasOne("Domain.Entities.Docs.Document", null)
                        .WithMany("Editors")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Docs.DocLabel", b =>
                {
                    b.HasOne("Domain.Entities.Docs.Document", null)
                        .WithMany("Labels")
                        .HasForeignKey("DocumentId");

                    b.HasOne("Domain.Entities.Bases.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Docs.Document", b =>
                {
                    b.HasOne("Domain.Entities.Logbooks.Logbook", null)
                        .WithMany()
                        .HasForeignKey("LogbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Docs.FavouriteDoc", b =>
                {
                    b.HasOne("Domain.Entities.Docs.Document", null)
                        .WithMany()
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany("FavouriteDocs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Logbooks.Logbook", b =>
                {
                    b.HasOne("Domain.Entities.Bases.Base", null)
                        .WithMany()
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Organisations.Department", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organisations.Organisation", null)
                        .WithMany("Departments")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Organisations.Organisation", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Permissions.RecordPermission<Domain.Entities.Bases.BasePermissionId, Domain.Entities.Bases.BaseId>", b =>
                {
                    b.HasOne("Domain.Entities.Bases.Base", null)
                        .WithMany("Permissions")
                        .HasForeignKey("BaseId");

                    b.HasOne("Domain.Entities.Bases.Base", null)
                        .WithMany()
                        .HasForeignKey("RecordId");

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Permissions.RecordPermission<Domain.Entities.Docs.DocPermissionId, Domain.Entities.Docs.DocumentId>", b =>
                {
                    b.HasOne("Domain.Entities.Docs.Document", null)
                        .WithMany("Permissions")
                        .HasForeignKey("DocumentId");

                    b.HasOne("Domain.Entities.Docs.Document", null)
                        .WithMany()
                        .HasForeignKey("RecordId");

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Permissions.RecordPermission<Domain.Entities.Logbooks.LogbookPermissionId, Domain.Entities.Logbooks.LogbookId>", b =>
                {
                    b.HasOne("Domain.Entities.Logbooks.Logbook", null)
                        .WithMany("Permissions")
                        .HasForeignKey("LogbookId");

                    b.HasOne("Domain.Entities.Logbooks.Logbook", null)
                        .WithMany()
                        .HasForeignKey("RecordId");

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Requests.RecordRequest<Domain.Entities.Bases.BaseRequestId, Domain.Entities.Bases.BaseId>", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("HandlerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bases.Base", null)
                        .WithMany("Requests")
                        .HasForeignKey("RecordId");
                });

            modelBuilder.Entity("Domain.Entities.Requests.RecordRequest<Domain.Entities.Docs.DocRequestId, Domain.Entities.Docs.DocumentId>", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("HandlerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Docs.Document", null)
                        .WithMany("Requests")
                        .HasForeignKey("RecordId");
                });

            modelBuilder.Entity("Domain.Entities.Requests.RecordRequest<Domain.Entities.Logbooks.LogbookRequestId, Domain.Entities.Logbooks.LogbookId>", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("HandlerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Logbooks.Logbook", null)
                        .WithMany("Requests")
                        .HasForeignKey("RecordId");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Domain.Entities.Organisations.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Entities.Organisations.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.OwnsOne("Domain.Entities.Users.UserPreference", "UserPreference", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("AutoSave")
                                .HasColumnType("bit");

                            b1.Property<bool>("EmailNotification")
                                .HasColumnType("bit");

                            b1.Property<int>("FontSize")
                                .HasColumnType("int");

                            b1.Property<int>("Theme")
                                .HasColumnType("int");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("UserPreference")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Bases.Base", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Labels");

                    b.Navigation("Permissions");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Entities.DataManagementPlans.DataManagementPlanTemplate", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Docs.Document", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Editors");

                    b.Navigation("Labels");

                    b.Navigation("Permissions");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Entities.Logbooks.Logbook", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Permissions");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Entities.Organisations.Organisation", b =>
                {
                    b.Navigation("DataManagementPlanTemplates");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Navigation("FavouriteDocs");
                });
#pragma warning restore 612, 618
        }
    }
}
