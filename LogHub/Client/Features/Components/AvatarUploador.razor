<MudFileUpload T="IBrowserFile" Accept=".jpg, .png" OnFilesChanged="@UploadImage" MaximumFileCount="100">
    <ButtonTemplate>
        @if (OriginImageUri is null && _imageUri is null)
        {
            <MudFab HtmlTag="label"
                    Color="Color.Info"
                    StartIcon="@Icons.Material.Filled.CloudUpload"
                    Size="Size.Large"
                    IconSize="Size.Medium"
                    for="@context"
                    Class="mb-3">
            </MudFab>
        }
        else if (_imageUri is not null)
        {
            <MudButton HtmlTag="label"
                       Color="Color.Info"
                       Size="Size.Large"
                       for="@context">
                <MudAvatar Size="Size.Large">
                    <MudImage src="@_imageUri"/>

                </MudAvatar>
            </MudButton>
        }
        else
        {
            <MudButton HtmlTag="label"
                       Color="Color.Info"
                       Size="Size.Large"
                       for="@context">
                <MudAvatar Size="Size.Large">
                    <MudImage Src="@OriginImageUri"/>

                </MudAvatar>
            </MudButton>
        }
    </ButtonTemplate >
</MudFileUpload>


@code {

    [Parameter]
    public string? OriginImageUri { get; set; }

    [Parameter]
    public EventCallback<string> OnImageUpdated { get; set; }

    string? _imageUri;

    private async Task UploadImage(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        var image = await inputFileChangeEventArgs.File.RequestImageFileAsync("image/png", 600, 600);

        var imageStream = image.OpenReadStream(1024 * 1024 * 10);

        var memoryStream = new MemoryStream();
        await imageStream.CopyToAsync(memoryStream);

        _imageUri = $"data:image/png;base64,{Convert.ToBase64String(memoryStream.ToArray())}";

        await OnImageUpdated.InvokeAsync(_imageUri);
        StateHasChanged();
    }

}
