<MudDataGrid T="LabelModel"
             MultiSelection="true"
             Items="@Labels"
             SortMode="SortMode.Multiple"
             Filterable="true"
             QuickFilter="@QuickFilter"
             Hideable="true"
             ReadOnly="false"
             ShowFilterIcons="false"
             EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.OnRowClick"
             Hover="true"
             CommittedItemChanges="OnCommittedItemChanges">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            Labels
        </MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0">
        </MudTextField>
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="@(() => _visible = true)"
                   Class="ml-4">
            Add
        </MudButton>

    </ToolBarContent>
    <Columns>
        <TemplateColumn Sortable="false" Filterable="false" Title="Color">
            <CellTemplate>
                <MudChip Text="@context.Item.Color"
                         Style="@($"background-color: {(string)context.Item.Color}; color: #ffffff")"/>
            </CellTemplate>
            <EditTemplate>
                <MudColorPicker Label="Basic Color Picker"
                                @bind-Text="context.Item.Color"
                                Style="@($"color: {(string)context.Item.Color};")"
                                Placeholder="Select Color"/>
            </EditTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Title="Name"/>
        <TemplateColumn Sortable="false" Filterable="false">
            <CellTemplate>
                <MudSpacer/>
                <MudIconButton Size="@Size.Small"
                               Icon="@Icons.Material.Outlined.RemoveCircleOutline"
                               Color="Color.Primary"
                               OnClick="@(() => OnDelete(context.Item))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudDialog @bind-IsVisible="_visible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/> Add Label
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudColorPicker Label="Color" @bind-Text="@NewLabel.Color"/>
        <MudTextField Label="Name" @bind-Value="@NewLabel.Name"/>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _visible = false" Class="px-10">
            Close
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnAdd" Class="px-10">
            Add
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string _searchString = string.Empty;

    [Parameter]
    public Guid RepositoryId { get; set; }

    List<LabelModel> Labels { get; set; } = new();

    LabelModel NewLabel { get; set; } = new();

    bool _visible = false;


    protected override async Task OnParametersSetAsync()
    {
        if (RepositoryId == Guid.Empty)
        {
            return;
        }

        Labels = await Client.GetFromJsonAsync<List<LabelModel>>($"api/repositories/{RepositoryId}/labels/") ?? new List<LabelModel>();
    }

    Func<LabelModel, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };

    private async Task OnCommittedItemChanges(LabelModel label)
    {
        await Client.PutAsJsonAsync($"api/repositories/{RepositoryId}/labels/{label.Id}", label);
    }

    private async Task OnDelete(LabelModel label)
    {
        var result = await DialogService.ShowMessageBox(
            "Delete",
            "Are you sure you want to delete this label?",
            "Delete", cancelText: "Cancel");

        if (result is null or false)
        {
            return;
        }

        await Client.DeleteAsync($"api/repositories/{RepositoryId}/labels/{label.Id}");

        Labels.Remove(label);
    }

    private async Task OnAdd()
    {
        _visible = false;

        var response = await Client.PostAsJsonAsync($"api/repositories/{RepositoryId}/labels/", NewLabel);

        if (!response.IsSuccessStatusCode)
        {
            return;
        }

        NewLabel.Id = await response.Content.ReadFromJsonAsync<Guid>();

        Labels.Add(NewLabel);
        NewLabel = new LabelModel();
    }

    private DialogOptions _dialogOptions = new() { FullWidth = true };
}
