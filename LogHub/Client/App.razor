@using Client.Services.States
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IUserAccountService UserAccountService

<CascadingAuthenticationState>
    <LoadingScreen>
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        @{
                            NavigationManager.NavigateTo("/");
                            NavigationManager.NavigateTo("/login");
                            Snackbar.Add("You should login first", Severity.Warning);
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
                <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    @{
                        Snackbar.Add("Sorry, there's nothing at this address.", Severity.Error);
                    }
                </LayoutView>
            </NotFound>
        </Router>
    </LoadingScreen>
</CascadingAuthenticationState>

@code {

    protected override async Task OnInitializedAsync()
    {
        await UserAccountService.UpdateCurrentUserAsync();
        UserAccountService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        UserAccountService.OnChange -= StateHasChanged;
    }

}
