@page "/organisations/create"
@using LogHub.Client.ViewModel
@using System.Security.Claims
@layout BackgroundLayout
@attribute [Authorize(Roles = "DataManager")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient Client


<MudImage Src="/img/logo-partial.png" Width="200" Class="py-3 justify-center"/>
<MudPaper Elevation="5" Class="frosted-glass-container d-flex flex-column py-8 px-10">
    <MudText Align="Align.Center" Typo="Typo.h6">
        Create Your Organisation
    </MudText>
    <MudForm Model="@Model"
             @ref="@_form"
             ValidationDelay="0">
        <ImageUploador OnImageUpdated="@OnLogoUploaded"/>

        <MudTextField Label="Name"
                      Variant="Variant.Filled"
                      @bind-Value="@Model.Name"
                      For="() => Model.Name"
                      Required="true"/>

        <MudTextField Label="Description"
                      Variant="Variant.Filled"
                      @bind-Value="@Model.Description"
                      For="() => Model.Description"
                      Lines="7"/>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mt-4"
                   OnClick="SubmitAsync"
                   Disabled="@(!_form.IsValid)">
            Create
        </MudButton>
    </MudForm>
</MudPaper>

@code {
    private MudForm _form = new();

    private OrganisationModel Model { get; } = new();

    private void OnLogoUploaded(string logo)
    {
        Model.Logo = logo;
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }
        Model.ManagerId = Guid.Parse((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Claims.First(c => c.Type == ClaimTypes.Sid).Value);
        await Client.PostAsJsonAsync("/api/organisations/create", Model);
        NavigationManager.NavigateTo("/");
    }

}
